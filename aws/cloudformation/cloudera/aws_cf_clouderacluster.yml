---
  AWSTemplateFormatVersion: '2010-09-09'
  Description: >
    Setup a Cloudera cluster for basic usage. All necessary parameters like node
    types, number of nodes, number of disks, their size and type are configurable.

  Parameters:
    clusterName:
      Description: Cluster name
      Default: cloudera.cluster.com
      Type: String
    clouderaVersion:
      Description: Cloudera version
      Default: 5.15.2
      Type: String
      AllowedValues:
        - 5.15.2
        - 5.14.4
        - 5.13.3
        - 5.12.2
        - 5.11.2
    databaseType:
      Description: Database type
      Default: MySQL
      Type: String
      AllowedValues:
        - MySQL
        - PostgreSQL
    diskType:
      Description: AWS EBS volume type
      Default: st1
      Type: String
      AllowedValues:
        - gp2
        - io1
        - st1
    diskSize:
      Description: Size of AWS EBS volume in GB
      Default: 100
      Type: Number
    keyName:
      Description: AWS key pair used for creating nodes
      Type: AWS::EC2::KeyPair::KeyName
      AllowedPattern: ".+"
      ConstraintDescription: Please select existing key pair.
    instanceType:
      Description: AWS EC2 node type
      Default: m4.xlarge
      Type: String
      AllowedValues: [m4.xlarge, m4.2xlarge, m4.4xlarge, d2.xlarge, d2.2xlarge, d2.4xlarge]
  Metadata:
    AWS::CloudFormation::Interface:
      ParameterGroups:
        -
          Label:
            default: "Cloudera cluster parameters"
          Parameters:
            - clusterName
            - clouderaVersion
            - databaseType
        -
          Label:
            default: "AWS node parameters"
          Parameters:
            - diskType
            - diskSize
            - keyName
            - instanceType
  Mappings:
    SubnetConfig:
      VPC:
        CIDR: 172.24.0.0/16
      Public:
        CIDR: 172.24.0.0/24
      Private:
        CIDR: 172.24.8.0/22
    RegionMap:
      eu-west-1: # Ireland
        AMI: ami-0e12cbde3e77cbb98
      eu-west-2: # London
        AMI: ami-7c1bfd1b
  Resources:
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        EnableDnsSupport: 'true'
        EnableDnsHostnames: 'true'
        CidrBlock:
          Fn::FindInMap:
            - SubnetConfig
            - VPC
            - CIDR
        Tags:
        - Key: Name
          Value: !Join ["-", [!Ref clusterName, "vpc"]]
    PrivateSubnet:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: VPC
        CidrBlock:
          Fn::FindInMap:
          - SubnetConfig
          - Private
          - CIDR
        Tags:
        - Key: Name
          Value: !Join ["-", [!Ref clusterName, "private"]]
        - Key: Network
          Value: Private
    PublicSubnet:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: VPC
        CidrBlock:
          Fn::FindInMap:
          - SubnetConfig
          - Public
          - CIDR
        Tags:
        - Key: Name
          Value: !Join ["-", [!Ref clusterName, "public"]]
        - Key: Network
          Value: Public
    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
        - Key: Name
          Value: !Join ["-", [!Ref clusterName, "ig"]]
    VPCGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId:
          Ref: VPC
        InternetGatewayId:
          Ref: InternetGateway
    NATEIP:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
    NATGateway:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId:
          Fn::GetAtt:
          - NATEIP
          - AllocationId
        SubnetId:
          Ref: PublicSubnet
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: VPC
        Tags:
        - Key: Name
          Value: !Join ["-", [!Ref clusterName, "public"]]
    PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: VPC
        Tags:
        - Key: Name
          Value: !Join ["-", [!Ref clusterName, "private"]]
    PublicSubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PublicSubnet
        RouteTableId:
          Ref: PublicRouteTable
    PrivateSubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PrivateSubnet
        RouteTableId:
          Ref: PrivateRouteTable
    PublicRoute:
      Type: AWS::EC2::Route
      DependsOn: VPCGatewayAttachment
      Properties:
        RouteTableId:
          Ref: PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: InternetGateway
    NATRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: PrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NATGateway
    ClouderaSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Installer Access"
        VpcId:
          Ref: VPC
    ClouderaSecGroupSSHIngress:
      Type: AWS::EC2::SecurityGroupIngress
      DependsOn: ClouderaSecGroup
      Properties:
        GroupId: !Ref ClouderaSecGroup
        IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
    ClouderaSecGroupCMIngress:
      Type: AWS::EC2::SecurityGroupIngress
      DependsOn: ClouderaSecGroup
      Properties:
        GroupId: !Ref ClouderaSecGroup
        IpProtocol: tcp
        FromPort: '7180'
        ToPort: '7180'
        CidrIp: 0.0.0.0/0
    ClouderaSecGroupInsideTrafficIngress:
      Type: AWS::EC2::SecurityGroupIngress
      DependsOn: ClouderaSecGroup
      Properties:
        GroupId: !Ref ClouderaSecGroup
        IpProtocol: tcp
        FromPort: "0"
        ToPort: "65535"
        SourceSecurityGroupId: !Ref ClouderaSecGroup
    ClouderaManagerLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: 3
    LogStream:
      Type: AWS::Logs::LogStream
      DependsOn: ClouderaManagerLogGroup
      Properties:
        LogGroupName: !Ref ClouderaManagerLogGroup
        LogStreamName: "ClouderaManagerLogStream"
    ErrorMetricFilter:
      Type: AWS::Logs::MetricFilter
      Properties:
        LogGroupName:
          Ref: ClouderaManagerLogGroup
        FilterPattern: "[ERROR]"
        MetricTransformations:
        - MetricValue: '1'
          MetricNamespace: CM
          MetricName: ErrorCount
    BastionHost:
      Type: AWS::EC2::Instance
      DependsOn: VPCGatewayAttachment
      Properties:
        Tags:
          - Key: Name
            Value: !Join ["-", [!Ref clusterName, "BastionHost"]]
        ImageId:
          Fn::FindInMap:
          - RegionMap
          - Ref: AWS::Region
          - AMI
        KeyName:
          Ref: keyName
        InstanceType: t2.micro
        NetworkInterfaces:
          - DeleteOnTermination: "true"
            DeviceIndex: 0
            AssociatePublicIpAddress: "true"
            SubnetId: !Ref PublicSubnet
            GroupSet:
              - !Ref ClouderaSecGroup
    ClouderaManager:
      Type: AWS::EC2::Instance
      Metadata:
        Comment: "AWS EC2 instance provisioning."
        AWS::CloudFormation::Init:
          configSets:
            mysql:
              - 01_mysql-install
              - 02_mysql-config-file
              - 03_mysql-run-service
              - 04_mysql-sql-files
              - 05_mysql-sql-run-queries
            cloudera_manager:
              - 01_cloudera_manager-java
              - 02_cloudera_manager-install
            cloudwatch:
              - 01_cloudwatch-agent
          01_mysql-install:
            commands:
              01_mysql-install-get-rpm:
                command: !Sub |
                  wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm
              02_mysql-install-rpm:
                command: !Sub |
                  rpm -ivh mysql-community-release-el7-5.noarch.rpm
                  yum install -y mysql-server
          02_mysql-config-file:
            files:
              '/etc/my.cnf':
                content: !Sub |
                  [mysqld]
                  skip-grant-tables = true
                  transaction-isolation = READ-COMMITTED
                  # Disabling symbolic-links is recommended to prevent assorted security risks;
                  # to do so, uncomment this line:
                  # symbolic-links = 0

                  key_buffer_size = 32M
                  max_allowed_packet = 32M
                  thread_stack = 256K
                  thread_cache_size = 64
                  query_cache_limit = 8M
                  query_cache_size = 64M
                  query_cache_type = 1

                  max_connections = 550
                  #expire_logs_days = 10
                  #max_binlog_size = 100M

                  #log_bin should be on a disk with enough free space. Replace '/var/lib/mysql/mysql_binary_log' with an appropriate path for your system
                  #and chown the specified folder to the mysql user.
                  log_bin=/var/lib/mysql/mysql_binary_log

                  # For MySQL version 5.1.8 or later. For older versions, reference MySQL documentation for configuration help.
                  binlog_format = mixed

                  read_buffer_size = 2M
                  read_rnd_buffer_size = 16M
                  sort_buffer_size = 8M
                  join_buffer_size = 8M

                  # InnoDB settings
                  innodb_file_per_table = 1
                  innodb_flush_log_at_trx_commit  = 2
                  innodb_log_buffer_size = 64M
                  innodb_buffer_pool_size = 4G
                  innodb_thread_concurrency = 8
                  innodb_flush_method = O_DIRECT
                  innodb_log_file_size = 512M

                  [mysqld_safe]
                  log-error=/var/log/mysqld.log
                  pid-file=/var/run/mysqld/mysqld.pid

                  sql_mode=STRICT_ALL_TABLES
                mode: "000644"
                owner: "root"
                group: "root"
          03_mysql-run-service:
            services:
              sysvinit:
                mysqld:
                  enabled: true
                  ensureRunning: true
          04_mysql-sql-files:
            files:
              '/tmp/mysql-secure.sql':
                content: !Sub |
                  UPDATE mysql.user SET Password=PASSWORD('root') WHERE User='root';
                  DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
                  DELETE FROM mysql.user WHERE User='';
                  FLUSH PRIVILEGES;
                mode: "000644"
                owner: "root"
                group: "root"
              '/tmp/mysql-cm-dbs.sql':
                content: !Sub |
                  CREATE DATABASE IF NOT EXISTS amon DEFAULT CHARACTER SET utf8;
                  GRANT ALL ON amon.* TO 'amon'@'%' IDENTIFIED BY 'amon_password';

                  CREATE DATABASE IF NOT EXISTS rman DEFAULT CHARACTER SET utf8;
                  GRANT ALL ON rman.* TO 'rman'@'%' IDENTIFIED BY 'rman_password';

                  CREATE DATABASE IF NOT EXISTS metastore DEFAULT CHARACTER SET utf8;
                  GRANT ALL ON metastore.* TO 'hive'@'%' IDENTIFIED BY 'hive_password';

                  CREATE DATABASE IF NOT EXISTS sentry DEFAULT CHARACTER SET utf8;
                  GRANT ALL ON sentry.* TO 'sentry'@'%' IDENTIFIED BY 'sentry_password';

                  CREATE DATABASE IF NOT EXISTS nav DEFAULT CHARACTER SET utf8;
                  GRANT ALL ON nav.* TO 'nav'@'%' IDENTIFIED BY 'nav_password';

                  CREATE DATABASE IF NOT EXISTS navms DEFAULT CHARACTER SET utf8;
                  GRANT ALL ON navms.* TO 'navms'@'%' IDENTIFIED BY 'navms_password';

                  CREATE DATABASE IF NOT EXISTS oozie DEFAULT CHARACTER SET utf8;
                  GRANT ALL PRIVILEGES ON oozie.* TO 'oozie'@'localhost' IDENTIFIED BY 'oozie';
                  GRANT ALL PRIVILEGES ON oozie.* TO 'oozie'@'%' IDENTIFIED BY 'oozie';
                mode: "000644"
                owner: "root"
                group: "root"
          05_mysql-sql-run-queries:
            commands:
              05_mysql-sql-run-query:
                command: !Sub |
                  mysql -u root -proot < /tmp/mysql-secure.sql
                  mysql -u root -proot < /tmp/mysql-cm-dbs.sql

          01_cloudera_manager-java:
            commands:
              01_cloudera_manager-java-install:
                command: !Sub |
                  wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.47.tar.gz
                  wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "https://download.oracle.com/otn-pub/java/jdk/8u201-b09/42970487e3af4f5aa5bca3f542482c60/jdk-8u201-linux-x64.rpm"
                  yum install -y jdk-8u201-linux-x64.rpm
                  tar zxvf mysql-connector-java-5.1.47.tar.gz
                  mkdir -p /usr/share/java/
                  cp mysql-connector-java-5.1.47/mysql-connector-java-5.1.47-bin.jar /usr/share/java/mysql-connector-java.jar
          02_cloudera_manager-install:
            files:
              '/etc/yum.repos.d/cloudera-manager.repo':
                content: !Sub |
                  [cloudera-manager]
                  # Packages for Cloudera Manager, Version 5, on RedHat or CentOS 7 x86_64
                  name=Cloudera Manager
                  baseurl=https://archive.cloudera.com/cm5/redhat/7/x86_64/cm/${clouderaVersion}/
                  gpgkey=https://archive.cloudera.com/cm5/redhat/7/x86_64/cm/RPM-GPG-KEY-cloudera
                  gpgcheck = 1
                mode: "000644"
                owner: "root"
                group: "root"
            commands:
              02_cloudera_manager-install-yum:
                command: !Sub |
                  yum install -y cloudera-manager-daemons cloudera-manager-server cloudera-manager-agent
            services:
              sysvinit:
                cloudera-scm-agent:
                  enabled: true
                  ensureRunning: true
                cloudera-scm-server:
                  enabled: true
                  ensureRunning: true
          01_cloudwatch-agent:
            files:
              '/tmp/awslogs.conf':
                content: !Sub |
                  [general]
                  state_file = /var/awslogs/state/agent-state

                  [/var/log/cloudera-scm-server/cloudera-scm-server]
                  file = /var/log/cloudera-scm-server/cloudera-scm-server.log
                  log_stream_name = ClouderaManagerLogStream
                  log_group_name = ${ClouderaManagerLogGroup}
                  datetime_format = %b %d %H:%M:%S 2019-03-27 10:56:38,888
                  initial_position = start_of_file
                mode: "000644"
                owner: "root"
                group: "root"
            commands:
              01_cloudwatch-agent-get:
                command: !Sub |
                  wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
              02_cloudwatch-agent-install:
                command: !Sub |
                  python awslogs-agent-setup.py -n -r ${AWS::Region} -c /tmp/awslogs.conf

      DependsOn: VPCGatewayAttachment
      Properties:
        Tags:
          - Key: Name
            Value: !Join ["-", [!Ref clusterName, "ClouderaManager"]]
        ImageId:
          Fn::FindInMap:
          - RegionMap
          - Ref: AWS::Region
          - AMI
        KeyName:
          Ref: keyName
        InstanceType: !Ref instanceType
        NetworkInterfaces:
          - DeleteOnTermination: "true"
            DeviceIndex: 0
            AssociatePublicIpAddress: "true"
            SubnetId: !Ref PrivateSubnet
            GroupSet:
              - !Ref ClouderaSecGroup
        BlockDeviceMappings:
          - DeviceName: "/dev/sdm"
            Ebs:
              VolumeType: !Ref diskType
              DeleteOnTermination: "true"
              VolumeSize: !Ref diskSize
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash

              yum install -y wget
              # Get the latest CloudFormation package
              mkdir -p /opt/aws/bin
              wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
              easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz

              # Start cfn-init
              /opt/aws/bin/cfn-init --stack ${AWS::StackId} --resource ClouderaManager --region ${AWS::Region} --configsets mysql,cloudera_manager,cloudwatch
